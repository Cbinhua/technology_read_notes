数据结构指相互之间存在的一种或多种特定关系的数据元素的集合
（1）集合：元素直接除了同属一个“集合”之外，别无其它关系
（2）线性结构：元素之间存在一对一的关系
（3）树形结构：元素之间存在一对多的关系
（4）图形结构：元素之间存在多对多的关系

常见的数据结构有：数组、队列、栈、链表、树、图、堆
（1）数组：在内存中开辟一个连续的空间存放元素
            特点：元素类型是固定的、长度是固定的、通过角标查询，查询快，增删慢
（2）队列（queue)：线性结构，先进先出
（3）栈(stack)：线性结构，先进后出
（4）链表（Linked list)：分为单链表，双链表，有序链表。是一种物理存储单元上非连续、非顺序的存储结构，
          数据元素的逻辑顺序是通过链表中的指针链接次序实现的，链表由一系列结点（链表中每一个元素称为结点）组成。
     链表分为单向链表(Singly linked lis)、双向链表(Doubly linked list)、循环链表(Circular Linked list)
     A、单向链表是最简单的链表形式。我们将链表中最基本的数据称为节点(node)，每一个节点包含了数据块和指向下一个节点的指针。
     B、双向链表就是有两个方向的链表。同单向链表不同，在双向链表中每一个节点不仅存储指向下一个节点的指针，而且存储指向前
     一个节点的指针。通过这种方式，能够通过在O(1)时间内通过目的节点直接找到前驱节点，但是同时会增加大量的指针存储空间。
     C、特点是表中最后一个结点的指针域指向头结点，整个链表形成一个环
 （5）树(tree)的种类：
        二叉树，二叉树要存储4个数据，分别是节点携带的信息和其父节点、左右子节点的指针。
        分支无限制的有根树：分支无限制的有根数则没有限制，可能有3个、5个甚至更多子节点。
        存储这种数据结构的问题在事先并不知道设置多少个child指针，所以提出左孩子右兄弟表示法。
  （6）图(Graph）：图由顶点的集合V和顶点之间的关系集合R构成。通常表示为：G（V，E），其中，G表示一个图，
    V是图G中顶点的集合，E是图G中边的集合。在图中的数据元素，我们称之为顶点（Vertex），顶点集合有穷非空。
    在图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。
        例如G1=(V,E)

         V={V1,V2,V3,V4,V5}

        E={（v1,v2）,(v1,v3)}

        表示无向图中，结点v1和v2相连，v1和v3相连。其中与某结点相连的线段的数目称为该节点的度。

        例如G2=(V,A)

        V={V1,V2,V3,V4,V5}

        A={<v1,v2>,<v1,v3>}

        G2表示有向图中，v1和v2相连，v1和v3相连。

        有向图在结点与结点之间有箭头的导向。其中某结点发出箭头线段的数量称为出度，接收到的箭头线段数量称为入度。

        无向完全图：任意两结点间都有一条边直接相连的图。边的数目为：n*(n-1)/2。
    
        有向完全图：任意两结点间都有相反方向的带箭头的弧（就是带箭头的线段，方向相反）连接。弧的数目为：n*(n-1)。

        图的存储结构有邻接矩阵和邻接表

        邻接矩阵根据图结点的个数 n 转换成 n 阶矩阵。两结点间有连线，则置值为1。

        例如G1=(V,E)

        V={V1,V2,V3,V4}

        E={（v1,v2）,(v1,v3)}

        邻接矩阵为

               v1   v2   v3  v3

        v1     0    1    1    0

        v2     1    0    0    0

        v3     1    0   0     0

        v4     0    0   0     0

 

        邻接表为：v1—>v2—>v3

                 v2—>v1

                 v3—>v1

    （7）堆(heap)：堆可以看成一棵按顺序排列的完全二叉树，根节点可以为大于等于任何子节点（也可以小于等于任意子节点）
            最大堆:每个节点的值都大于等于它的孩子节点。
            最小堆:每个节点的值都小于等于它的孩子节点。
            下标为i的节点，它的子树的左节点的下标为2i,右节点为2i+1，父亲的节点下标为i/2（向下取整）。
            在程序设计中，使用位运算来代替直接*2可以提高运行速度，某些编译器中会把一些特定的乘法运算改写为位运算。

